(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{409:function(e,t,n){"use strict";n.r(t);var l=n(44),r=Object(l.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h3",{attrs:{id:"flex布局-常用属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flex布局-常用属性"}},[this._v("#")]),this._v(" flex布局 & 常用属性")]),this._v(" "),t("p",[this._v('Flex 是 Flexible Box 的缩写，意为"弹性布局"，用来为盒状模型提供最大的灵活性。\n任何一个容器都可以指定为 Flex 布局。\n行内元素也可以使用 Flex 布局。\nWebkit 内核的浏览器，必须加上-webkit前缀。\n注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。\n常用属性：')]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("**flex-direction**属性决定主轴的方向（即项目的排列方向）。\n  row | row-reverse | column | column-reverse;\n\n**flex-wrap**属性定义，如果一条轴线排不下，应该如何换行。\n  nowrap | wrap | wrap-reverse;\n\n**flex-flow**属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\n  flex-flow: <flex-direction> || <flex-wrap>;\n\n**justify-content**属性定义了项目在主轴上的对齐方式（主轴、交叉轴与flex-direction相关）\n    flex-start（默认值）：左对齐\n    flex-end：右对齐\n    center： 居中\n    space-between：两端对齐，组件之间的间隔都相等。\n    space-around：距边界两侧的间隔相等，元素之间的间隔比项目与边框的间隔大一倍。\n\n**align-items**属性定义项目在交叉轴上如何对齐。\n\t  flex-start | flex-end | center | baseline | stretch;\n\n**align-content**属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\t  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);
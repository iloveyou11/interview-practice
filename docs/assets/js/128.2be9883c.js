(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{484:function(o,s,e){"use strict";e.r(s);var i=e(44),n=Object(i.a)({},(function(){var o=this,s=o.$createElement,e=o._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[e("h3",{attrs:{id:"本地缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地缓存"}},[o._v("#")]),o._v(" 本地缓存")]),o._v(" "),e("p",[o._v("cookie,sessionStorage,localStorage区别及使用场景。")]),o._v(" "),e("ol",[e("li",[o._v("cookie机制：如果不在浏览器中设置过期时间，cookie被保存在内存中，生命周期随浏览器的关闭而结束，这种cookie简称会话cookie。如果在浏览器中设置了cookie的过期时间，cookie被保存在硬盘中，关闭浏览器后，cookie数据仍然存在，直到过期时间结束才消失。Cookie是服务器发给客户端的特殊信息，cookie是以文本的方式保存在客户端，每次请求时都带上它")]),o._v(" "),e("li",[o._v("session机制：当服务器收到请求需要创建session对象时，首先会检查客户端请求中是否包含sessionid。如果有sessionid，服务器将根据该id返回对应session对象。如果客户端请求中没有sessionid，服务器会创建新的session对象，并把sessionid在本次响应中返回给客户端。通常使用cookie方式存储sessionid到客户端，在交互中浏览器按照规则将sessionid发送给服务器。如果用户禁用cookie，则要使用URL重写，可以通过response.encodeURL(url) 进行实现；API对encodeURL的结束为，当浏览器支持Cookie时，url不做任何处理；当浏览器不支持Cookie的时候，将会重写URL将SessionID拼接到访问地址后。")]),o._v(" "),e("li",[o._v("localStorage:localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失。")]),o._v(" "),e("li",[o._v("sessionStorage的生命周期是在仅在当前会话下有效。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。")])]),o._v(" "),e("p",[e("strong",[o._v("应用场景：")]),o._v("\ncookie：")]),o._v(" "),e("ul",[e("li",[o._v("判断用户是否登陆过网站，以便下次登录时能够实现自动登录（或者记住密码）。如果我们删除cookie，则每次登录必须从新填写登录的相关信息。")]),o._v(" "),e("li",[o._v("保存上次登录的时间等信息。")]),o._v(" "),e("li",[o._v("保存上次查看的页面")]),o._v(" "),e("li",[o._v("浏览计数\nSession用于保存每个用户的专用信息，变量的值保存在服务器端，通过SessionID来区分不同的客户。")]),o._v(" "),e("li",[o._v("网上商城中的购物车")]),o._v(" "),e("li",[o._v("保存用户登录信息")]),o._v(" "),e("li",[o._v("将某些数据放入session中，供同一用户的不同页面使用")]),o._v(" "),e("li",[o._v("防止用户非法登录\nlocalStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据\nsessionStorage：敏感账号一次性登录；")])])])}),[],!1,null,null,null);s.default=n.exports}}]);
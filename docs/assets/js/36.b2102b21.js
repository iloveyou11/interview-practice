(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{392:function(t,e,l){"use strict";l.r(e);var i=l(44),s=Object(i.a)({},(function(){var t=this,e=t.$createElement,l=t._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h3",{attrs:{id:"介绍下重绘和回流以及如何进行优化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#介绍下重绘和回流以及如何进行优化"}},[t._v("#")]),t._v(" 介绍下重绘和回流以及如何进行优化")]),t._v(" "),l("ol",[l("li",[t._v("浏览器渲染机制")])]),t._v(" "),l("ul",[l("li",[t._v("浏览器采用流式布局模型（Flow Based Layout）")]),t._v(" "),l("li",[t._v("浏览器会把HTML解析成DOM，把CSS解析成CSSOM，DOM和CSSOM合并就产生了渲染树（Render Tree）。")]),t._v(" "),l("li",[t._v("有了RenderTree，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置，最后把节点绘制到页面上。")]),t._v(" "),l("li",[t._v("由于浏览器使用流式布局，对Render Tree的计算通常只需要遍历一次就可以完成，但table及其内部元素除外，他们可能需要多次计算，通常要花3倍于同等元素的时间，这也是为什么要避免使用table布局的原因之一。")])]),t._v(" "),l("ol",{attrs:{start:"2"}},[l("li",[l("p",[t._v("回流\n回流是布局或者几何属性需要改变就称为回流。回流是影响浏览器性能的关键因素，因为其变化涉及到部分页面（或是整个页面）的布局更新。一个元素的回流可能会导致了其所有子元素以及DOM中紧随其后的节点、祖先节点元素的随后的回流。")])]),t._v(" "),l("li",[l("p",[t._v("重绘\n由于节点的几何属性发生改变或者由于样式发生改变而不会影响布局的，称为重绘，例如outline, visibility, color、background-color等，重绘的代价是高昂的，因为浏览器必须验证DOM树上其他节点元素的可见性。")])])]),t._v(" "),l("p",[l("strong",[t._v("回流和重绘两者之间的关系：")]),t._v("\n回流必定会发生重绘，重绘不一定会引发回流。")]),t._v(" "),l("ol",{attrs:{start:"4"}},[l("li",[t._v("优化策略")])]),t._v(" "),l("p",[l("strong",[t._v("（1）减少以下属性/方法的使用，避免强制触发回流和重绘")])]),t._v(" "),l("p",[t._v("现代浏览器大多都是通过队列机制来批量更新布局，浏览器会把修改操作放在队列中，至少一个浏览器刷新（即16.6ms）才会清空队列，但当你获取布局信息的时候，队列中可能有会影响这些属性或方法返回值的操作，即使没有，浏览器也会强制清空队列，触发回流与重绘来确保返回正确的值。")]),t._v(" "),l("p",[t._v("主要包括以下属性或方法：")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("offsetTop、offsetLeft、offsetWidth、offsetHeight\nscrollTop、scrollLeft、scrollWidth、scrollHeight\nclientTop、clientLeft、clientWidth、clientHeight\nwidth、height\ngetComputedStyle()\ngetBoundingClientRect()\n")])])]),l("p",[t._v("所以，我们应该避免频繁的使用上述的属性，他们都会强制渲染刷新队列。")]),t._v(" "),l("p",[l("strong",[t._v("（2）css相关")])]),t._v(" "),l("ul",[l("li",[t._v("使用 transform 替代 top")]),t._v(" "),l("li",[t._v("使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流（改变布局）")]),t._v(" "),l("li",[t._v("避免使用table布局，可能很小的一个小改动会造成整个 table 的重新布局。")]),t._v(" "),l("li",[t._v("尽可能在DOM树的最末端改变class，可以限制了回流的范围，使其影响尽可能少的节点。")]),t._v(" "),l("li",[t._v("避免设置多层内联样式，CSS 选择符从右往左匹配查找，避免节点层级过多。")]),t._v(" "),l("li",[t._v("将动画效果应用到position属性为absolute或fixed的元素上，避免影响其他元素的布局，这样只是一个重绘，而不是回流，同时，控制动画速度可以选择 requestAnimationFrame，详见探讨 requestAnimationFrame。")]),t._v(" "),l("li",[t._v("避免使用CSS表达式，可能会引发回流。")]),t._v(" "),l("li",[t._v("将频繁重绘或者回流的节点设置为图层，图层能够阻止该节点的渲染行为影响别的节点，例如will-change、video、iframe等标签，浏览器会自动将该节点变为图层。")]),t._v(" "),l("li",[t._v("CSS3 硬件加速（GPU加速），使用css3硬件加速，可以让transform、opacity、filters这些动画不会引起回流重绘 。但是对于动画的其它属性，比如background-color这些，还是会引起回流重绘的，不过它还是可以提升这些动画的性能。")])]),t._v(" "),l("p",[l("strong",[t._v("（3）js相关")])]),t._v(" "),l("ul",[l("li",[t._v("避免频繁操作样式，最好一次性重写style属性，或者将样式列表定义为class并一次性更改class属性。")]),t._v(" "),l("li",[t._v("避免频繁操作DOM，创建一个documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中。")]),t._v(" "),l("li",[t._v("避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。")]),t._v(" "),l("li",[t._v("对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。")])])])}),[],!1,null,null,null);e.default=s.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{496:function(t,n,e){"use strict";e.r(n);var s=e(44),l=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"什么是负载均衡-常见实现方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是负载均衡-常见实现方案"}},[t._v("#")]),t._v(" 什么是负载均衡？常见实现方案？")]),t._v(" "),e("p",[t._v("当一台服务器的性能达到极限时，我们可以使用服务器集群来提高网站的整体性能。那么，在服务器集群中，需要有一台服务器充当调度者的角色，用户的所有请求都会首先由它接收，调度者再根据每台服务器的负载情况将请求分配给某一台后端服务器去处理。\n那么在这个过程中，调度者如何合理分配任务，保证所有后端服务器都将性能充分发挥，从而保持服务器集群的整体性能最优，这就是负载均衡问题。\n几种实现方案：")]),t._v(" "),e("ol",[e("li",[t._v("HTTP重定向实现负载均衡\n随机分配策略 、轮询策略(RR)")]),t._v(" "),e("li",[t._v("DNS负载均衡\n我们知道，数据包采用IP地址在网络中传播，而为了方便用户记忆，我们使用域名来访问网站。那么，我们通过域名访问网站之前，首先需要将域名解析成IP地址，这个工作是由DNS完成的。也就是域名服务器。\n我们提交的请求不会直接发送给想要访问的网站，而是首先发给域名服务器，它会帮我们把域名解析成IP地址并返回给我们。我们收到IP之后才会向该IP发起请求。\n那么，DNS服务器有一个天然的优势，如果一个域名指向了多个IP地址，那么每次进行域名解析时，DNS只要选一个IP返回给用户，就能够实现服务器集群的负载均衡。")]),t._v(" "),e("li",[t._v("反向代理负载均衡\n反向代理服务器是一个位于实际服务器之前的服务器，所有向我们网站发来的请求都首先要经过反向代理服务器，服务器根据用户的请求要么直接将结果返回给用户，要么将请求交给后端服务器处理，再返回给用户。\n我们知道，所有发送给我们网站的请求都首先经过反向代理服务器。那么，反向代理服务器就可以充当服务器集群的调度者，它可以根据当前后端服务器的负载情况，将请求转发给一台合适的服务器，并将处理结果返回给用户。")])])])}),[],!1,null,null,null);n.default=l.exports}}]);